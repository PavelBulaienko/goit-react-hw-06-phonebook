{"version":3,"sources":["components/Contacts.js","redux/actions.js","components/FilteredContacts.js","components/Phonebook.js","redux/store.js","components/App.js","index.js"],"names":["connect","state","contacts","dispatch","deleteContact","contactID","type","payload","className","items","map","id","name","number","onClick","FilteredContacts","filter","contactName","find","contact","Phonebook","handleInputName","e","setState","target","value","handleInputContact","handleInputFilter","filteredNames","props","toLowerCase","includes","filterContacts","localStorage","getItem","this","updateContacts","JSON","parse","setItem","stringify","pattern","title","required","onChange","addContact","shortid","generate","length","Component","actions","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8147e85e.chunk.js","sourcesContent":["import { React } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../redux/actions';\r\n\r\nconst Contacts = ({ contacts, deleteContact }) => (\r\n  <ul className=\"nameList\">\r\n    {contacts.items.map(({ id, name, number }) => (\r\n      <li key={id} className=\"item\">\r\n        <p className=\"name\">\r\n          {name}: {number}\r\n        </p>\r\n        <button type=\"button\" onClick={() => deleteContact(id)}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({ contacts: state });\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (contactID) => dispatch(actions.deleteContact(contactID)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n","export const addContact = (newContact) => ({\r\n  type: 'phonebook/AddContact',\r\n  payload: newContact,\r\n});\r\n\r\nexport const deleteContact = (contactId) => ({\r\n  type: 'phonebook/DeleteContact',\r\n  payload: contactId,\r\n});\r\n\r\nexport const updateSessionContact = (contacts) => ({\r\n  type: 'phonebook/UpdateContacts',\r\n  payload: contacts,\r\n});\r\n\r\nexport const filteredContact = (contacts) => ({\r\n  type: 'phonebook/FilteredContact',\r\n  payload: contacts,\r\n});\r\n","import { React } from 'react';\r\n\r\nconst FilteredContacts = ({ contacts, filter }) => (\r\n  <ul className=\"nameList\">\r\n    {filter.map((contactName) => {\r\n      const { id, name, number } = contacts.find((contact) => contact.name === contactName);\r\n\r\n      return (\r\n        <li key={id} className=\"item\">\r\n          <p className=\"name\">\r\n            {name}: {number}\r\n          </p>\r\n        </li>\r\n      );\r\n    })}\r\n  </ul>\r\n);\r\n\r\nexport default FilteredContacts;\r\n","import { Component } from 'react';\r\nimport Contacts from './Contacts';\r\nimport FilteredContacts from './FilteredContacts';\r\nimport shortid from 'shortid';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../redux/actions';\r\n\r\nclass Phonebook extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    localStorage.getItem('contacts') &&\r\n      this.props.updateContacts(JSON.parse(localStorage.getItem('contacts')));\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.props.contacts.items &&\r\n      localStorage.setItem('contacts', JSON.stringify(this.props.contacts.items));\r\n  }\r\n\r\n  handleInputName = (e) => {\r\n    this.setState({ name: e.target.value });\r\n  };\r\n  handleInputContact = (e) => {\r\n    this.setState({ number: e.target.value });\r\n  };\r\n  handleInputFilter = (e) => {\r\n    const names = this.props.contacts.items.map((contact) => contact.name);\r\n    const filteredNames = names.filter((name) =>\r\n      name.toLowerCase().includes(e.target.value.toLowerCase()),\r\n    );\r\n    this.props.filterContacts(filteredNames);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"form\">\r\n          <label className=\"nameLabel\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.handleInputName}\r\n            className=\"nameInput\"\r\n          />\r\n          <label className=\"numberLabel\">Number</label>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={this.handleInputContact}\r\n            className=\"numberInput\"\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            onClick={() =>\r\n              this.props.addContact({\r\n                name: this.state.name,\r\n                id: shortid.generate(),\r\n                number: this.state.number,\r\n              })\r\n            }\r\n          >\r\n            Add contact\r\n          </button>\r\n        </form>\r\n        <h2>Contacts: </h2>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.handleInputFilter}\r\n          className=\"nameFilter\"\r\n        />\r\n        {this.props.contacts.filter.length === 0 ? (\r\n          <Contacts contacts={this.props.contacts.items} />\r\n        ) : (\r\n          <FilteredContacts\r\n            contacts={this.props.contacts.items}\r\n            filter={this.props.contacts.filter}\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ contacts: state });\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addContact: (contact) => dispatch(actions.addContact(contact)),\r\n  updateContacts: (contacts) => dispatch(actions.updateSessionContact(contacts)),\r\n  filterContacts: (contacts) => dispatch(actions.filteredContact(contacts)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Phonebook);\r\n","import { createStore } from 'redux';\r\n\r\nconst contacts = {\r\n  items: [\r\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n  ],\r\n  filter: [],\r\n};\r\n\r\nconst reducer = (state = contacts, { type, payload }) => {\r\n  switch (type) {\r\n    case 'phonebook/AddContact':\r\n      return { items: [...state.items, payload], filter: state.filter };\r\n    case 'phonebook/DeleteContact':\r\n      return {\r\n        items: [...state.items.filter((contact) => contact.id !== payload)],\r\n        filter: state.filter,\r\n      };\r\n    case 'phonebook/UpdateContacts':\r\n      return { items: payload, filter: state.filter };\r\n    case 'phonebook/FilteredContact':\r\n      return { items: state.items, filter: payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import '../style/App.css';\nimport Phonebook from './Phonebook';\nimport { Provider } from 'react-redux';\nimport store from '../redux/store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Phonebook />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}